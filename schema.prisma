generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  pending
  inprogress
  inreview
  done
}

enum Priority {
  high
  medium
  low
}

enum Unit {
  kg
  sqft
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  password   String
  first_name String?
  last_name  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Jobs       Jobs[]
}

model Contact {
  id    String @id @default(uuid())
  name  String
  phone String @unique
  job   Jobs[]
}

model Jobs {
  id          String     @id @default(uuid())
  name        String
  priority    Priority   @default(low)
  description String
  userId      String
  contact     Contact    @relation(fields: [contactId], references: [id])
  contactId   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id])
  payments    Payments[]
  task        Task[]
}

model Task {
  id        String   @id @default(uuid())
  jobId     String
  job       Jobs     @relation(fields: [jobId], references: [id])
  detail    String
  width     Float
  height    Float
  rate      Float
  unit      Unit
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  status    Status?  @default(pending)
  updatedAt DateTime @updatedAt
}

model Payments {
  id        String              @id @default(uuid())
  jobId     String
  job       Jobs                @relation(fields: [jobId], references: [id])
  remainder PaymentRemainders[]
  detail    String
  method    String
  amount    Float
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

model PaymentRemainders {
  id        String   @id @default(uuid())
  paymentId String
  payments  Payments @relation(fields: [paymentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
